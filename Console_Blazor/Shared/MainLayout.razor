@using System.Collections.Concurrent;
@inherits LayoutComponentBase
@inject SigninUser signin
@inject IHttpContextAccessor http
@inject DbContextUser db
<PageTitle>Console_Blazor</PageTitle>

<div id="modal_block" class="modal" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Modal title</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>Modal body text goes here.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary">Save changes</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<div id="notifications_block">
</div>
@inject SigninUser signin
@inject IJSInvoke jsinvoke
@code
{
    List<string> Messages { get; set; } = new();
    public async Task ShowNotification(string notification)
    {
        Messages.Add(notification);
        //var result = await jsinvoke.Eval<int>($"showNotification('{notification}')");
    }
    protected async Task StartCheckout()
    {
        while (true)
        {
            if (signin.IsSignin())
            {
                ConcurrentQueue<string> notifications = signin.GetFromSession<ConcurrentQueue<string>>("InputNotificationsQueue");
                foreach (var notfication in notifications.ToArray())
                {
                    ShowNotification(notfication);
                }
                notifications.Clear();
            }
            await Task.Delay(1000);
        }
    }
    

    protected override async Task OnAfterRenderAsync(bool first)
    {
        if (first)
        {
            StartCheckout();
        }
    }
}
@code
{
    bool Opened { get; set; } = true;
   
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Task.Run(()=>
        {
            while (true)
            {
                var messages = signin.GetNotifications();
                foreach(var message in messages)
                {
                    ShowNotification(message);
                }
                Thread.Sleep(300);
            }
        });
    }
}
<div class="page">
    <div class="sidebar" style="width: @(Opened? "320px":"100px");">
        <Console_Blazor.Shared.NavMenu OnOpenedMenu="(evt => { Opened = evt; StateHasChanged(); })"/>
    </div>

    <main>
        <div class="top-row px-4">           
            @*foreach(var message in Messages.ToList())
            {
                <div class="alert alert-info">
                    @message
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="(evt => { Messages.Remove(message); StateHasChanged(); })">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
            }*@








        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>
