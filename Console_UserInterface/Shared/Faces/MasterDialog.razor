@attribute [Label("")]
@inherits BaseComponent
@code
{
    [Parameter]
    [NotNullNotEmpty]
    public List<object> Models { get; set; }

    private int Cursor { get; set; } = 0;

    [NotNullNotEmpty]
    [Parameter]
    public EventCallback<List<object>> OnCancel { get; set; }

    [NotNullNotEmpty]
    [Parameter]
    public EventCallback<List<object>> OnComplete { get; set; }
    public Console_UserInterface.Shared.Forms.FormModel FormModelRef;
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }
}
<CardContainer>
    <CardHeader>
        <h2>@Title @(Cursor+1) шаг</h2>        
    </CardHeader>
    <CardBody>
        <FormModel @ref="@FormModelRef" Form="@(new InputFormModel(Models[Cursor]))"></FormModel>
    </CardBody>
    <CardFooter>
        @FormModelRef?.Form?.Errors.ToJsonOnScreen()
        <button class="btn btn-sm btn-primary @((FormModelRef is not null && FormModelRef.Form is not null && FormModelRef.Form.IsValid == false? "disabled": ""))" @onclick="OnSubmitClicked">@(Cursor == (Models.Count() - 1) ? "готово" : "далее")</button>
        <button class="btn btn-sm btn-primary" @onclick="OnReturnClicked">@(Cursor == 0 ? "отмена" : "назад")</button>
    </CardFooter>
</CardContainer>
@code
{
    [Parameter]
    public string Title { get; set; }

    public async Task OnCompleted()
    {
        await OnComplete.InvokeAsync(Models);
    }

    public async Task OnSubmitClicked()
    {        
        if (Cursor == (Models.Count()-1))
        {
            await OnCompleted();
        }
        else
        {
            Cursor++;
            StateHasChanged();
        }

    }

    public async Task OnCanceled()
    {
        await OnCancel.InvokeAsync(Models);
    }

    public async Task OnReturnClicked()
    {
        
        if (Cursor == 0)
        {
            await OnCanceled();
        }
        else
        {
            Cursor--;
            StateHasChanged();
        }
        
    }
}

