@attribute [Label("")]
@inherits BaseComponent
@code
{
    [Parameter]
    [NotNullNotEmpty]
    public List<object> Models { get; set; }

    private int Cursor { get; set; } = 0;

    [NotNullNotEmpty]
    [Parameter]
    public EventCallback<List<object>> OnCancel { get; set; }
    public InputFormModel EditorFormModel { get; set; }
    [NotNullNotEmpty]
    [Parameter]
    public EventCallback<List<object>> OnComplete { get; set; }
    public Console_UserInterface.Shared.Forms.FormModel FormModelRef;
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        this.EditorFormModel = new InputFormModel(Models[Cursor]);
        this.FormIsValid = this.EditorFormModel.IsValid;
        this.EnsureIsValide();
    }

    public bool FormIsValid { get; set; } = false;
}
@try
{
    <CardContainer>
        <CardHeader>
            <h2>@Title @(Cursor + 1) шаг</h2>
            @*if (FormModelRef is not null && FormModelRef.Form is not null && FormModelRef.Form.Item is not null)
            {                
                <p>@(FormModelRef.Form.Item.Validate().ToJsonOnScreen())</p>
            }*@
        </CardHeader>
        <CardBody>       
            <div style="width: 100%; max-height: 480px; overflow-y: auto;">
                <FormModel @ref="@FormModelRef" Form="@(EditorFormModel)" OnValidation="@(evt => { FormIsValid = evt; StateHasChanged();})"></FormModel>
            </div>
        </CardBody>
        <CardFooter>
            <button class="btn btn-sm btn-primary @((  ((Cursor == Models.Count() )|| (FormIsValid == false))? "disabled": ""))" @onclick="OnSubmitClicked">@(Cursor == (Models.Count() - 1) ? "готово" : "далее")</button>
            <button class="btn btn-sm btn-primary @((Cursor == 0? "disabled": ""))" @onclick="OnReturnClicked">@(Cursor == 0 ? "отмена" : "назад")</button>
        </CardFooter>
    </CardContainer>
}
catch(Exception ex)
{
    <p>@ex.Message</p>
}

@code
{
    [Parameter]
    public string Title { get; set; }

    public async Task OnCompleted()
    {
        await OnComplete.InvokeAsync(Models);
    }

    public async Task OnSubmitClicked()
    {        
        if (Cursor == (Models.Count()-1))
        {
            await OnCompleted();
        }
        else
        {
            Cursor++;
            this.EditorFormModel = new InputFormModel(Models[Cursor]);
            this.FormIsValid = this.EditorFormModel.IsValid;
            StateHasChanged();
        }

    }

    public async Task OnCanceled()
    {
        await OnCancel.InvokeAsync(Models);
    }

    public async Task OnReturnClicked()
    {
        
        if (Cursor == 0)
        {
            await OnCanceled();
        }
        else
        {
            Cursor--;
            this.EditorFormModel = new InputFormModel(Models[Cursor]);
            this.FormIsValid = this.EditorFormModel.IsValid;
            StateHasChanged();
        }
        
    }
}

