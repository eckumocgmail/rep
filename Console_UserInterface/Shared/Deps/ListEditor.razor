@using System.Collections;
@code
{
    [Parameter]
    [NotNullNotEmpty]
    public Type ItemType { get; set; }
    public InputFormModel ItemForm { get; set; }
    public object ItemRef { get; set; }

    public List<object> SelectedItems { get; set; } = new();

    [Parameter]
    public List<object> Items { get; set; } = new();
    [Parameter]
    public List<object> VisibleItems { get; set; } = new();

    [Parameter]
    public string SearchQuery { get; set; }
    [Parameter]
    public List<string> SearchOptions { get; set; } = new();
    [Parameter]
    public string SortRule { get; set; }
    [Parameter]
    public bool ShowLeft { get; set; }

    public async Task OnSearchSubmit(SearchControl search)
    {
        SearchQuery = search.SearchQuery;
        SearchOptions = search.SearchOptions;
      

        VisibleItems = Items.Where(item => item.ToJson().IndexOf(SearchQuery.ToLower()) != -1).ToList();

        await Task.CompletedTask;
    }
    Dictionary<string, bool> FiltersVisible { get; set; } = new();
}
<CardContainer>
    <CardHeader>
        <div>
            <SearchControl OnSearch="@OnSearchSubmit" SearchOptions="@SearchOptions" SearchQuery="@SearchQuery"></SearchControl>
        </div>
        <div align="left">
            <label> Настроить фильтры </label>
            @foreach (var property in ItemType.GetOwnPropertyNames())
            {
                <div>                   
                    <CheckBox Label="@property" OnChange="(evt => { FiltersVisible[property] = FiltersVisible.ContainsKey(property)==false? true: !FiltersVisible[property]; StateHasChanged(); })"></CheckBox>                    
                </div>
                <div style="margin-left: 20px;">
                    @if (FiltersVisible.ContainsKey(property) && FiltersVisible[property])
                    {
                        @switch(ItemType.GetProperty(property).PropertyType.GetTypeName())
                        {
                            case "Int64": 
                            case "Int32":
                            case "long":
                            case "int":
                            case "float":
                            case "decimal":
                            case "double":
                                <FormControl Model='@(new InputFormField(){ Label="Мин.", Name = property, Help = "", Value = 0})'></FormControl>
                                <FormControl Model='@(new InputFormField(){ Label="Макс.", Name = property, Help = "", Value = 100})'></FormControl>
                                break;
                            case "System.DateTime":
                            case "DateTime":
                            case "Date":
                              
                                <FormControl Model='@(new InputFormField(){ Label="Мин.", Name = property, Help = "", Value = 0})'></FormControl>
                                <FormControl Model='@(new InputFormField(){ Label="Макс.", Name = property, Help = "", Value = 100})'></FormControl>
                                break;
                            case "string":
                            case "String":                              
                                <CheckBox Label="Email" OnChange="(evt => {})"></CheckBox>
                                <CheckBox Label="Url" OnChange="(evt => {})"></CheckBox>
                                <CheckBox Label="Pattern" OnChange="(evt => {})"></CheckBox>
                                <CheckBox Label="Русккий" OnChange="(evt => {})"></CheckBox>
                                <CheckBox Label="Англ" OnChange="(evt => {})"></CheckBox>                               
                                <FormControl Model='@(new InputFormField(){ Type = "number", Value="0", Name=property, Label="Длина"})'></FormControl>
                                break;
                            default:
                                <p>@ItemType.GetProperty(property).PropertyType.GetTypeName()</p>
                            break;
                        }
                    }
                 
                </div>
            }
        </div>
        <div>
            <span class="btn btn-sm btn-primary" @onclick="(evt => { OnAddButtonClicked(); })">добавить</span>
            <span class="btn btn-sm btn-danger @(SelectedItems is not null &&  SelectedItems.Count()>0?"":"disabled")" @onclick="(evt => { OnRemoveButtonClicked(); })">удалить</span>
        </div>
    </CardHeader>
    <CardBody>
        @if (ItemForm is not null)
        {           
            <FormModel Form="@ItemForm">
                <span class="btn btn-sm btn-primary @(ItemForm.Item.Validate().Count()==0?"":"disabled")"
                    @onclick="(evt => { AddItem(ItemForm.Item);  } )">
                    сохранить
                </span>
            </FormModel>
        }
        else
        {
            <DataTableBase DataCheckable="@false" DataType="ItemType" DataItems="VisibleItems" OnSelect="(evt => { SelectedItems = evt; StateHasChanged(); })"></DataTableBase>
        }
    </CardBody>
    <CardFooter>
        <PaginationView PagesCount="@PagesCount" PageNumber="@PageNumber" OnChanged="OnPageChanged"></PaginationView>
    </CardFooter>
</CardContainer>
@code
{
    [Parameter]
    public EventCallback<object> OnAdd { get; set; }

    public void AddItemTest()
    {
        Items.Add(ItemType.New());
        Update();
        StateHasChanged();
    }
    public void AddItem( object item)
    {
        Items.Add(item);
        ItemForm = null;
        try
        {
            OnAdd.InvokeAsync(item).Wait();
        }
        catch(Exception ex)
        {
            this.Error(ex);
        }
        Update();
        StateHasChanged();
    }
    protected override void OnInitialized()
    {
        if (Items is null || Items.Count() == 0)
        {
            Items = GetDataSet();
        }
        PagesCount = Items is null? 1:  Items.Count() % PageSize == 0 ? ((int)(Items.Count() / PageSize)) : ((int)(Items.Count() / PageSize) + 1);
        Update();
    }
    public void Update()
    {
        try
        {
            if (SelectedItems is null)
                SelectedItems = new();
            SelectedItems.Clear();
            //VisibleItems = Items.Where(item => item.ToJson().IndexOf(SearchQuery.ToLower()) != -1).ToList();
            VisibleItems = Items.Skip(PageSize * (PageNumber - 1)).Take(PageSize).ToList();
        }
        catch(Exception ex)
        {
            this.Error($"Исключение при обновлении модели данных: {ex.Message}\n{ex.StackTrace}");
        }

    }
}
@code
{
    public int PageSize = 10;
    public int PagesCount = 1;
    public int PageNumber = 1;
}
@functions
{
    public void OnAddButtonClicked()
    {
        if (ItemType is not null)
        {
            ItemForm = new InputFormModel(ItemRef = ItemType.New());
        }
        else
        {
            throw new ArgumentException("ItemType не задан");
        }
    }

    public List<object> GetDataSet()
    {
        List<object> result = new();
        foreach (var dbt in GetType().Assembly.GetTypes<DbContext>().Select(t => t.GetTypeName()).ToList())
        {
            using (var db = (DbContext)dbt.New())
            {
                if (db.GetEntitiesTypes().Select(p => p.GenericTypeArguments.Count() > 0 ? p.GenericTypeArguments[0].GetTypeName() : p.GetTypeName()).ToList().Contains(ItemType.GetTypeName()))
                {
                    try
                    {
                        var pdbset = db.GetType().GetProperties().First(p => p.PropertyType == typeof(DbSet<>).MakeGenericType(ItemType));
                        var pdbsetref = pdbset.GetValue(db);
                        foreach (object item in ((IEnumerable)pdbsetref))
                        {
                            result.Add(item);
                        }
                    }
                    catch(Exception ex)
                    {
                        this.Error(ex);
                    }
                }
            }
        }
        return result;
    }

    [Parameter]
    public EventCallback<List<object>> OnRemove { get; set; }

    public void OnRemoveButtonClicked()
    {
        foreach(var item in SelectedItems)
        {
            Items.Remove(item);
        }
        OnRemove.InvokeAsync(SelectedItems).Wait();
        SelectedItems.Clear();
        Update();
        StateHasChanged();
    }

    public void OnPageChanged(int page)
    {
        PageNumber = page;
        Update();
    }
}