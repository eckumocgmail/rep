@typeparam DataType
@using Console_InputApplication
@inject IInputService input
@code 
{
    [Parameter]
    public bool DataCheckable { get; set; }

    [Parameter]
    public IEnumerable<DataType> DataItems { get; set; }
    public HashSet<DataType> CheckedItems { get; set; } = new();

    [Parameter]
    public List<string> DisplayColumns { get; set; }  

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        this.DisplayColumns = this.DisplayColumns is null ? typeof(DataType).GetInputProperties().Take(5).ToList() : this.DisplayColumns;
    }

    public List<string> GetColumnsLabels()
    {
        return typeof(DataType).GetInputProperties().Select(property => typeof(DataType).GetPropertyLabel(property)).ToList();
    }

    public List<string> GetColumnsLabels(params string[] properties)
    {
        return properties is null? new List<string>(): properties.Select(property => typeof(DataType).GetPropertyLabel(property)).ToList();
    }
    [Parameter]
    public EventCallback<DataType> OnChanged { get; set; }
    public async Task OnItemSelected( DataType item )
    {
        await OnChanged.InvokeAsync(item);
        StateHasChanged();
    }
    public void OnSettingsClicked()
    {
        


    }
    public void OnMaxSizeClicked() { }
    public void OnDefaultSizeClicked() { }
} 


<ContextMenu Id="myMenu">
    <Item OnClick="OnSettingsClicked">Свойства</Item>
    <Seperator />
    <Item>
        Вид
        <SubMenu>
            <Item OnClick="@OnMaxSizeClicked">Максимальный размер</Item>
            <Item OnClick="@OnDefaultSizeClicked">Обычный размер</Item>
        </SubMenu>
    </Item>
</ContextMenu>

<ContextMenuTrigger MenuId="myMenu">
     
<style>
    .brigth-on-holver:hover{
        background-color: black;
        color: white;
    }
</style>

@if(DataItems is null || DataItems.Count()==0)
{
    <div class="alert alert-info">Нет данных</div>
}
else
{    
    <table class="table table-bordered table-hover table-dark">              
        <tr class="brigth-on-holver">
            @if(DataCheckable)
            {
                <td style="width: 50px;"></td>
            }
            @if(DisplayColumns is not null)
            {
                @foreach (string DisplayColumn in GetColumnsLabels(DisplayColumns.ToArray()))
                {
                    <td>@DisplayColumn</td>
                }
            }
                
        </tr>
        @foreach(DataType Item in DataItems)
        {
            <tr @onclick="async evt => { await OnItemSelected(Item); StateHasChanged(); }" @onclick:preventDefault @onclick:stopPropagation>
                @if (false)
                {
                    <td style="width: 50px;"><Checkbox Checked="@CheckedItems.Contains(Item)" OnChange="(evt => { if(CheckedItems.Contains(Item))CheckedItems.Remove(Item); else CheckedItems.Add(Item); StateHasChanged(); })"></Checkbox></td>
                }
                @if (DisplayColumns is not null)
                {
                    @foreach (string DisplayColumn in DisplayColumns)
                    {
                        <td>@Item.GetValue(DisplayColumn)</td>
                    }
                }                   
            </tr>
        }
    </table>
}
</ContextMenuTrigger>