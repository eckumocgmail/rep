@using Console_InputApplication.ViewEvents;
@using Microsoft.EntityFrameworkCore;
@using static Console_UserInterface.Shared.Forms.ValidationForm;

@inject ILogger<FormControl> logger

@code {
    public List<object> ToListObjects(dynamic val)
    {
        List<object> result = new();
        foreach (var item in val){
            result.Add((object)val);
        }
        return result;
    }
    [Parameter]
    public InputFormField Model { get; set; }

    [Parameter]
    public EventCallback<InputEvent> AfterInput { get; set; }
    public HashSet<Action> AfterInitiallized { get; set; } = new HashSet<Action>();
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (Model != null && Model.Type != null) Model.Type = Model.Type.ToLower();
        
    }

    private static string NoName = "NoName";
    public void Error(Exception ex)
    {
        Console.WriteLine($"[{GetType().GetName()}]:[{(Model!=null?Model.Name:NoName)}]: {ex.Message}");
        Console.WriteLine($"[{GetType().GetName()}]:[{(Model != null ? Model.Name : NoName)}]: {ex.StackTrace}");
    }

    public void Info(object item)
    {
        Console.WriteLine($"[{GetType().GetName()}]:[{(Model != null ? Model.Name : NoName)}]: {item}");
    }

    /// <summary>
    /// Скрипт обработчика события ввода номера телефона в поле формы
    /// </summary>    
    public string GetInputPhoneJS()
    {
        return @"
                    var evt = window.event;
                    try {
                        console.log(evt);

                        var s = '';
                        var v = evt.target.value;
                        for (let i = 0; i < v.length; i++) {
                            if ('0123456789-'.indexOf(v[i]) != -1) {
                                s += v[i];
                                if (s.length > 13) {
                                    break;
                                }
                            }
                        }
                        if (s.length > 1 && s[1] != '-') s = s.substring(0, 1) + '-' + s.substring(1);
                        if (s.length > 4 && s[5] != '-') s = s.substring(0, 5) + '-' + s.substring(5);
                        if (s.length > 8 && s[9] != '-') s = s.substring(0, 9) + '-' + s.substring(9);
                        v = s;
                        if (v.endsWith('-')) v = v.substring(0, v.length - 1);
                        this.value = v;

                    } catch (e) {
                        console.error(e);
                    };";
    }
}

<div>@Model.ToJsonOnScreen()</div>
@if (Model == null)
{
    <div class="alert alert-danger">Отсутсвует ссылка в свойстве Model</div>
}
else
{
    
<div class="input-group flex-column" style="width: 100%; margin-top: 12px; justify-content: flex-start; align-items: flex-start;">

    @if (Model.Type == "hidden")
    {
        <input type="hidden" value="@Model.GetHtmlInputValue()" id="@Model.GetInputId()" name="@Model.GetInputName()" />
    }
    else
    {
        @if (Model.Type != "bool" && Model.Type != "checkbox")
        {
            <label>@Model.Label</label>
        }


        @if (Model.Type == "number" || Model.Type == "email" || Model.Type == "text" || Model.Type == "date" || Model.Type == "datetime" || Model.Type == "password" || Model.Type == "color")
        {
            <input type="@Model.Type.ToLower()"
                   value="@Model.GetHtmlInputValue()"
                   name="@Model.GetInputName()"
                   id="@Model.GetInputId()"
                   style="width: 100%;"
                   @oninput:preventDefault
                   @oninput="@((e) => OnInputValue(Model.Name)(e))"
                   @onfocus="@((e) => OnFocused(Model.Name)(e))"
                       class="form-control is-@Model.State input-sm" />

        }
        else if (Model.Type == "phone")
        {
            <div @oninput:preventDefault
                 @oninput="@((e) => OnInputValue(Model.Name)(e))"
                 style="width: 100%;">
                <input type="text"
                       value="@Model.GetHtmlInputValue()"
                       name="@Model.GetInputName()"
                       style="width: 100%;"
                       id="@Model.GetInputId()"
                       oninput="@GetInputPhoneJS()"
                           class="form-control is-@Model.State input-sm" />
            </div>

        }
        else if (Model.Type == "multilinetext")
        {
            <textarea type="text"
                      name="@Model.GetInputName()"
                      style="width: 100%; resize: none; height: 128px;"
                      id="@Model.GetInputId()"
                      @oninput:preventDefault
                      @oninput="@((e) => OnInputValue(Model.Name)(e))"
                          class="form-control is-@Model.State input-sm">@Model.GetHtmlInputValue()</textarea>
        }
        else if (Model.Type == "icon")
        {

        }
        else if (Model.Type == "bool" || Model.Type == "checkbox")
        {
            <div class="form-check">
                <label class="form-check-label" for="flexCheckDefault">
                    @Model.Label
                </label>
                    <input style="width: 25px;"
                           value="@Model.GetHtmlInputValue()"
                    @oninput:preventDefault
                    @oninput="@((e) => OnInputValue(Model.Name)(e))" class="form-check-input input-sm" type="checkbox" checked="@Model.Value" id="@Model.GetInputId()" name="@Model.GetInputName()">
                </div>
          

        }

        else if (Model.Type.ToLower() == "selectcontrol")
        {
                <select class="form-control input-sm" style="width: 100%;"
                    name="@Model.GetInputName()"
                    id="@Model.GetInputId()"
                    @onchange:preventDefault
                    @oninput="@((e) => OnInputValue(Model.Name)(e))">
                @foreach (var option in (((Select)Model.Control).Options))
                {
                    @if (option.Value.ToString() == Model.Value.ToString())
                    {
                        <option selected value="@option.Value">@option.Key</option>
                    }
                    else
                    {
                        <option value="@option.Value">@option.Key</option>
                    }

                }

            </select>
        }
        else if (Model.Type == "custom")
        {

            
            <div class="form-check">
                <input @oninput:preventDefault @oninput="@((e) => { Model.Visible = !Model.Visible; StateHasChanged(); })" class="form-check-input input-sm" type="checkbox" value="" id="flexCheckDefault">
                <label class="form-check-label" for="flexCheckDefault">
                    @Model.Label
                </label>
            </div>
            @if(Model.Visible)
            {
                @if (Model.IsCollection)
                {
                    @if(Model.ValueType is null)
                    {
                            <div class="alert alert-warning">Не установлено значение ValueType для FormField</div>
                    }
                    else
                    {
                            <ListEditor ItemType="@Model.ValueType.ToType()" Items="@(ToListObjects(Model.Value))"></ListEditor>
                    }
                    
                    
                }
                else
                {
                    @if (Model.Value is null)
                    {
                        <div class="alert alert-warning">Не установлено значение Value для FormField</div>
                    }
                    else
                    {
                        <FormEditor Model="@(new InputFormModel(Model.Value))" Title="@Model.Label"></FormEditor>
                    }                     
                }
                
            }

            @*code
                {
                //[Parameter]
                //public ModalComponent RefModal { get; set; }
            }
            <ButtonContainer OnClicked="@(async ()=> { await RefModal.PopupDialog();  })">@Model.Name</ButtonContainer>
            <ModalComponent @ref="@(RefModal)">
                <ContentBox Model="@(Model.Control)"></ContentBox>
            </ModalComponent>*@
        }
        else if (Model.Type == "image")
        {
            @inject IJSRuntime js
            @code
            {
                 
                public async Task OnImageClicked()
                {
                    await js.InvokeAsync<string>("alert(1);");
                }
            }
            <div>
                <input type="hidden" name="@Model.Name" id="@Model.Name" value="@Model.Value" />

                <img style="width: 222px; height: 222px;" @onclick="@OnImageClicked" />
            </div>
        }
        else if (Model.Type == "inputdictionary")
        {            

            <select class="form-control input-sm" style="width: 100%;">
                <option value="null">Не выбрано</option>
                @foreach (var item in GetDataDictionary(Model.TextValue))
                {
                    <option value="@item.Key">@item.Value</option>
                }                                    
            </select>
        }
        else
        {
            <div class="alert alert-warning">Тип поля ввода @Model.Type не зарегистрирован в @GetType().Name</div>
        }

        @if (string.IsNullOrEmpty(Model.Help) == false)
        {

            <small class="form-text text-info">@Model.Help</small>
        }
        @foreach (var error in Model.Errors)
        {
            <div><small class="form-text text-danger">@error</small></div>
        }
    }
</div>
}
@inject IServiceProvider sp
@code
{
    public Dictionary<int,string> GetDataDictionary( string exp )
    {
        Dictionary<int, string> result = new();
        if (String.IsNullOrWhiteSpace(exp) || exp.Contains(",") == false)
            throw new ArgumentException("exp", "Строка должна содержать имя сущности и свойство для отобраажени я через запятую");
        var entity = exp.Split(",")[0];
        var property = exp.Split(",")[1];
        foreach (Type dbtype in GetType().Assembly.GetTypes<DbContext>())
        {
            DbContext dbc = (DbContext)sp.GetService(dbtype);
            var types = dbc.GetEntitiesTypes().Select(p => p.GenericTypeArguments[0].GetTypeName()).ToList();
            if (types.Contains(entity))
            {
                var pdbset = dbc.GetType().GetProperties().First(p => p.PropertyType == typeof(DbSet<>).MakeGenericType(entity.ToType()));
                var pdbsetref = pdbset.GetValue(dbc);
                foreach (object item in (dynamic)pdbsetref)
                {
                    var id = item.GetValue("ID");
                    if(id is null)
                    {
                        id = item.GetValue("Id");
                    }
                    var label = item.GetValue(property);
                    result[int.Parse(id.ToString())] = label.ToString();
                }
            }
        }
        return result;
    }
}




@code
{
    public class Select : ViewItem
    {
        public object Value { get; set; }
        public Dictionary<object, object> Options { get; set; }

        public Select() { }
    }
    /// <summary>
    /// Обработчик события ввода данных в поле формы передаёт специальное сообщение родительскому компоненту
    /// </summary>
    /// <param name="name"></param>
    /// <returns></returns>
    public Action<ChangeEventArgs> OnInputValue(string name)
    {
        return (changes) =>
        {

            Info(name + "=" + (changes.Value == null ? "" : changes.Value.ToString()));
            AfterInput.InvokeAsync(new InputEvent()
            {
                Type = "input",
                Property = name,
                Value = changes.Value == null ? "" : changes.Value.ToString()
            }).Wait();
        };
    }

    public Action<FocusEventArgs> OnFocused(string name)
    {
        return (evt) =>
        {
            Info(name + "=" + evt.GetType().Name);
            if (Model.State == "untouched")
            {
                Model.State = "invalid";
            }
        };
    }
}