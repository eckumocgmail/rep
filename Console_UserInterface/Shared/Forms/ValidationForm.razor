@using Console_InputApplication.ViewEvents;
@using System.ComponentModel.DataAnnotations.Schema;
@using Newtonsoft.Json;
@using System.Reflection;
@using static AttributesInputTest;
@inherits LayoutComponentBase
@inject Microsoft.Extensions.Logging.ILogger<ValidationForm> Logger
@code{



    [Parameter]
    public global::FormModel Model { get; set; }

    [Parameter]
    public bool Border { get; set; }

    [Parameter]
    public EventCallback OnValidated { get; set; }

    [Parameter]
    public EventCallback OnChangedCallback { get; set; }
    

}
@code{
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await Validate();
    }
    protected async Task Validate()
    {
        var message = Model.Validate();
    
        Model.FormFields.ForEach(item =>
        {
            item.State = message.ContainsKey(item.Name) && message[item.Name].Count() > 0 ? "invalid" : "valid";
        });
        this.Info(message.ToJson());
        if (Model.IsValid)
        {
            await OnValidated.InvokeAsync();
        }
        StateHasChanged();
    }
}
@if (Model == null)
{
    <ProgressAnimation></ProgressAnimation>
}
else
{
  
    <div class="btn"
         style="width: 100%; height: 90%;                  
                   overflow-y: auto;
                   padding: 20px;
                   border-radius: 2px; box-shadow: 0px 4px 3px -2px rgba(0, 0, 0, 0.4), 0px 2px 2px 0px rgba(0, 0, 0, 0.24), 0px 2px 6px 0px rgba(0, 0, 0, 0.22);">
        <p class="text-body-header">@Model.Title</p>
        <div class="text-black-50 text-info">@Model.Description</div>
       
      
        <div class="text-black-50 text-danger">@Model.Message</div>
        <form>
            <div>
                @foreach (var field in Model.FormFields)
                {
                    <div style="padding: 10px;">
                        <FormControl Model="@field"
                                     AfterInput="@OnPropertyChanged"
                                     OnEvent="@OnEventSubmited" />
                    </div>
                }

            </div>
        </form>
        
        <div style="padding: 5px;" align="right"> @ChildContent </div>
    </div>
}
@functions
{
    [Parameter]
    public RenderFragment ChildContent { get; set; }
    public void OnEventSubmited()
    {
        
    }
    public async Task OnPropertyChanged(InputEvent evt)
    {


        this.Info("OnPropertyChanged()");
        try
        {
            Dictionary<string, List<string>> message = Model.Validate();
            //form.SetErrors(Model, message);
            Model.FormFields.ForEach(item =>
            {
                item.State = message.ContainsKey(item.Name) && message[item.Name].Count() > 0 ? "invalid" : "valid";
            });
            this.Info(message.ToJson());
            if (Model.IsValid)
            {
                await OnValidated.InvokeAsync();
            }
            StateHasChanged();
            
            await OnChangedCallback.InvokeAsync(this.Model.Item);
            
        }
        catch(Exception ex)
        {
            Model.Message = ex.Message;
        }


    }
}