@using Console_InputApplication.ViewEvents;
@inherits BaseComponent
@using static Console_UserInterface.Shared.Forms.ValidationForm;
@inject ILogger<ValidationForm> Logger
@code
{   
    [Parameter]
    public InputFormModel Form { get; set; }

    [Parameter]
    public bool Border { get; set; }

    [Parameter]
    public EventCallback OnValidated { get; set; }

    [Parameter]
    public EventCallback OnChangedCallback { get; set; }

    bool Debug = true;
}
@code 
{
    [Parameter]
    public Action<bool> OnValidation { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Errors = new();
        try
        {

            Form = Form is null ? new InputFormModel() : Form;
        }
        catch (Exception ex)
        {
            this.Error("Исключение при инициаллизации: ", ex);
        }
        await Validate();
    }
    public Dictionary<string, List<string>> Errors { get; set; }
    public Dictionary<string, List<string>> Valdiate(object p) => p.Validate();
    public void SetErrors(object model, Dictionary<string, List<string>> errors)
    {
        Errors = errors;
        foreach (var field in Form.FormFields)
        {
            field.Errors.Clear();
        }
        foreach (var kv in errors)
        {
            Form.FormFields.First(field => field.Name == kv.Key).Errors = kv.Value;
        }
        StateHasChanged();
    }
    protected async Task Validate()
    {
        await Task.CompletedTask;
        try
        {
            if (Form is null)
                return;
            if (Form.Item is null && Form.Json is not null)
            {
                Form.Item = Form.Json.FromJson<object>();
            }
            if (Form.Item is not null)
            {
                var message = Form.Item.Validate();
                SetErrors(Form, message);
                Form.FormFields.ForEach(item =>
                {
                    item.State = message.ContainsKey(item.Name) && message[item.Name].Count() > 0 ? "invalid" : "valid";
                });
                this.Info(message.ToJson());

            }
            if (Form.IsValid)
            {
                await OnValidated.InvokeAsync();
            }
        }
        catch(Exception ex)
        {
            this.Error(this.UserMessage = $"Ошибка при валидации : {ex.Message}");
            throw;
        }
        StateHasChanged();
    }
    [Parameter]
    public string Title { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        await this.Validate();
    }

    public bool IsValid()
    {
        return this.Errors.Where(kv => kv.Value.Count() > 0).Count() > 0;
    }
}
@if (Form == null)
{
    <ProgressAnimation></ProgressAnimation>
}
else
{

    <div class="btn" align="left"
         style="width: 100%; height: 90%;
                   overflow-y: auto;
                   padding: 20px;
                   border-radius: 2px; box-shadow: 0px 4px 3px -2px rgba(0, 0, 0, 0.4), 0px 2px 2px 0px rgba(0, 0, 0, 0.24), 0px 2px 6px 0px rgba(0, 0, 0, 0.22);">
        <h2>@(Title is not null ? Title : Form.Title)</h2><hr/>
        <div class="text-black-50 text-info">@Form.Description</div>
   
        @*@foreach (var kv in Errors)
        {
            @foreach (var error in kv.Value)
            {
                <div align="left" class="text text-danger">@kv.Key : @error</div>
            }
        }
        
        <div class="text-black-50 text-danger" align="left">@Form.Error</div>*@
        <div>
            <div>
                 
                @foreach (var field in Form.FormFields)
                {
                    <div style="padding: 3px;">                    
                        <FormControl Model="@field" AfterInput="@OnPropertyChanged" />
                        
                    </div>
                }

            </div>
        </div>

        <div style="padding: 5px;" align="right"> @ChildContent </div>
        <div style="padding: 5px;" align="right">
            @Body
        </div>      
    </div>
}
@functions
{
    [Parameter]
    public EventCallback<object> OnReady { get; set; }

    public string Json { get; set; }


    public Dictionary<string, List<string>> ValidateOnInput(object model, InputEvent evt)
    {
        TextDataSetter.SetValue(model, evt.Property, evt.Value);
        this.Form.FormFields.First(f => f.Name == evt.Property).Value = evt.Value;
        return model.Validate();
    }
    public async Task OnPropertyChanged(InputEvent evt)
    {
        this.Info("OnPropertyChanged()");
        try
        {
            Dictionary<string, List<string>> message = ValidateOnInput(Form.Item, evt);
            Form.IsValid = message.Where(kv => kv.Value.Count() > 0).Count() == 0;
            if( OnValidation != null)
            {
                OnValidation(Form.IsValid);
            }

            SetErrors(Form, message);
            Form.FormFields.ForEach(item =>
            {
                item.State = message.ContainsKey(item.Name) && message[item.Name].Count() > 0 ? "invalid" : "valid";
            });
            this.Info(message.ToJson());
            if (Form.IsValid)
            {
                await OnValidated.InvokeAsync();
            }
           
            StateHasChanged();

            await OnChangedCallback.InvokeAsync(this.Form.Item);

        }
        catch (Exception ex)
        {
            Form.Error = ex.Message;
        }

        Json = Form.Item.ToJsonOnScreen();
    }
} 

