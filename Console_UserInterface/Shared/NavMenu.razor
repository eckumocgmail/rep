@inject NavigationManager nav
@inject SigninUser signin
@inject AuthStateProvider auth
@code
{
    public bool IsSignin { get; set; } = false;
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        nav.LocationChanged += (sender, evt) =>
        {
            IsSignin = signin.IsSignin();
            if (IsSignin)
            {
                try
                {
                    signin.UpdateUrlLocation(nav.Uri);
                }
                catch (Exception ex)
                {
                    this.Error("Ошибка обновления URL: " + ex.Message);
                }
            }
            StateHasChanged();
        };
    }
}
<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Console_UserInterface</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        
        <AuthorizeView Roles="customer">
            <NavMenuCustomer></NavMenuCustomer>
        </AuthorizeView>
        <AuthorizeView Roles="transport">
            <NavMenuTransport></NavMenuTransport>
        </AuthorizeView>
        <NavMenuUser IsSignin="@IsSignin"></NavMenuUser>
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
}
