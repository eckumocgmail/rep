@using BookingModel.ServiceDataModel;
@using System.Globalization;
@inject ServiceController controller

@inject IInputModalService input
@code 
{
    public bool Visible { get; set; } = true;
    public int step { get; set; } = 1;
}

<CardContainer>
    <CardHeader>
        @step @SelectedService @SelectedWork
    </CardHeader>
    <CardBody>
        @switch( step )
        {
            case 1:
                <SelectWorks OnChanged="@OnWorkChanged"></SelectWorks>
                break;
            case 2:
                <SelectService OnChanged="@OnServiceChanged"></SelectService>
                break;
            case 3:
                @if(SelectedService is not null || SelectedWork is not null)
                {
                    <SelectTime serviceWorkId="@SelectedWork.Id" serviceDepartmentId="@SelectedService.Id" OnChanged="@OnTimeChanged"></SelectTime>
                }
                break;
            case 4:
                @if (SelectedService is not null || SelectedWork is not null)
                {
                    <SubmitBooking Model="@BookingModel"></SubmitBooking>
                }
                
                break;
        }
    </CardBody>
    <CardFooter>
        @if(step==1)
        {
            <button @onclick="evt => { Visible=false; StateHasChanged(); }" class="btn btn-sm btn-primary">закрыть</button>
        }
        else
        {
            <button @onclick="evt => { step--; Update(); StateHasChanged(); }" class="btn btn-sm btn-primary">назад</button>
        }
        
        <button @onclick="evt => { step++; Update(); StateHasChanged(); }" class="btn btn-sm btn-primary @(CanForward()? "": "disabled")">далее</button>
        <button @onclick="evt => { step++; Update(); StateHasChanged(); }" class="btn btn-sm btn-primary">готово</button>
    </CardFooter>
</CardContainer>
@code
{
    void Update()
    {

        if(SelectedService is not null && SelectedWork is not null)
        {
            this.BookingModel.ServicePriceId = controller.GetPriceList(SelectedService.Id).FirstOrDefault(p => p.ServiceWorkId == SelectedWork.Id).Id;
        }
       
        if (SelectedTime is not null)
            this.BookingModel.WorkDate = SelectedTime.ToString().Substring(0, 10);
        if (SelectedTime is not null)
            this.BookingModel.WorkTime = SelectedTime.ToString().Substring(11);
    }
    public BookingSlot BookingModel { get; set; } = new();
    bool CanForward()
    {
        switch(step)
        {
            case 1: return SelectedWork is not null;
            case 2: return SelectedService is not null;
            case 3: return SelectedTime is not null;
        }
        return false;
    }
    public object SelectedTime { get; set; }
    public ServiceWork SelectedWork { get; set; }
    public ServiceDepartment SelectedService { get; set; }
    public void OnServiceChanged(ServiceDepartment evt)
    {
        SelectedService = evt;
        StateHasChanged();
    }
    public void OnWorkChanged(ServiceWork evt)
    {
        SelectedWork = evt;
        StateHasChanged();
    }
    public void OnTimeChanged(object evt)
    {
        SelectedTime = evt;
        StateHasChanged();
    }
}