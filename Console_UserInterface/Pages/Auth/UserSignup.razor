@page "/user/signup"
@using Console_UserInterface.ControlAttributes;

@inject DbContextUser db
@inject NavigationManager nav
@inject SignupUser signup
@inject SigninUser signin

@code
{
    protected override void OnInitialized()
    {
        base.OnInitialized();
        this.Info("Initialized");
    }
    public void OnSignupComplete(List<object> args)
    {
        var account = (UserAccount)args.FirstOrDefault(a => a is UserAccount);
        var person = (UserPerson)args.FirstOrDefault(a => a is UserPerson);
        try
        {
            account.Hash = UserAccount.GetHashSha256(account.Password);
            if (signup.HasWith(account))
            {
                message = "Пользователь с таким Email уже зарегистрирован";
                StateHasChanged();
                return;
            }
            var result = signup.Signup(account, person);

            if (result.Succeeded)
            {
                var roles = new string[] { "customer", "transport", "holder", "webuser", role };
                result.Result.BusinessFunctions = new();
                result.Result.Roles = roles.Select(name =>
                {
                    var role = db.UserRoles_.FirstOrDefault(r => r.Code.ToLower() == name);
                    if (role == null)
                    {
                        db.UserRoles_.Add(role = new()
                            {
                                Code = name.ToLower(),
                                Name = name.ToLower()
                            });
                        db.SaveChanges();
                    }
                    UsersRoles p = null;
                    db.UsersRoles_.Add(p = new()
                        {
                            RoleId = role.Id,
                            UserId = result.Result.Id
                        });
                    result.Result.BusinessFunctions.Add(p);
                    db.SaveChanges();
                    return role;
                }).ToList();
                db.SaveChanges();
                result.Result.BusinessFunctions = db.UsersRoles_.Where(ur => ur.UserId == result.Result.Id).ToList();
            }
            if (result.Succeeded)
            {
                nav.NavigateTo("/public/search-products");
            }
            else
            {
                message = result.Exception;
            }
        }
        catch (Exception ex)
        {
            message = ex.ToString();
        }
        StateHasChanged();
    }
}
@code
{
    public class RoleSelectionModel
    {
        [SelectData(nameof(UserRole), nameof(UserRole.Code))]
        public string Role { get;set; }
    }
}
<PageTitle>ЕвроАвто/Регистрация</PageTitle>
<MasterDialog
    OnComplete="OnSignupComplete"
    Models='@(new List<object>(){ 
    new UserAccount("customer@gmail.com", "customer@gmail.com"),
    new RoleSelectionModel(),
    new UserPerson()
    {
        Tel = "7-921-090-3572",
        FirstName = "Константин",
        LastName = "Александрович",
        SurName = "Батов",
        Birthday = DateTime.Now
    }})'>
</MasterDialog>
@*
<div>
    <div>
        <FormEditor Model="@account" OnReady="(evt => { account  = (UserAccount)evt; OnSaveButtonClicked(); } )">
            <div class="text-danger">@message</div>
        </FormEditor>
    </div>
    <div>
        <FormEditor Model="@person" OnReady="(evt => { account  = (UserAccount)evt; OnSaveButtonClicked(); } )">
        </FormEditor>
    </div>
</div>*@
@code
{
    string role = "customer";
 
    public string message { get; set; } = "";    
}
        