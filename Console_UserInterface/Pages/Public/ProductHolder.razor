@page "/public/holder-products/{Id:int}"
@attribute [Authorize(Roles = "webuser")]

@using Console_BlazorApp.AppUnits.DeliveryModel;
@using Microsoft.AspNetCore.Mvc;
@using Console_BlazorApp.AppUnits.DeliveryApi;
@using pickpoint_delivery_service;
@using Console_BlazorApp.AppUnits.DeliveryServices;

@inject pickpoint_delivery_service.DeliveryDbContext db
@inject NavigationManager nav

@code
{
    [Parameter]
    public int? Id { get; set; }
    public string PageTitle { get; set; } = "test";
    public bool ProgressIsActive { get; set; } = false;


    public Holder holder { get; set; } = null;
    public Order OrderRef { get; set; } = new Order();
    public int PageNumber { get; set; } = 1;
    public string SearchQuery { get; set; } = "";
    public int PagesCount { get; set; } = 1;
    public List<Product> products { get; set; } = new();
    public List<Product> AvailableProducts { get; set; } = new();
    public List<string> SearchOptions { get; set; } = new() { };
    public List<Product> SelectedProducts
    {
        get
        {
            return products;// _signin.GetFromSession<List<Product>>("selected-products");
        }
    }

    public void OnInitializedButtonClicked()
    {

        new DeliveryDbContextInitiallizer().Init
            (db, @"D:\System-Config\ProjectsConsole\Console_AuthModel");
    }

    public void OnOrderCheckoutButtonClicked()
    {
        db.Orders.Find(OrderRef.Id).OnOrderCreated();
        db.SaveChanges();
        nav.NavigateTo("/user/orders");
    }


    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (this.Id is null )
            this.Id = db.Holders.First().Id;
        this.OnSearch();
        db.Orders.Add(this.OrderRef = new Order() { CustomerID = db.Customers.First().Id });
        this.holder = db.Holders.FirstOrDefault(holder => holder.Id == Id);
        db.SaveChanges();
    }


    public int orderId { get; set; }


    public void Add([FromRoute] int product_id)
    {
        var p = AvailableProducts.First(p => p.Id == product_id);
        AvailableProducts.Remove(p);
        this.SelectedProducts.Add(p);
        var item = new OrderItem()
        {
            ProductID = product_id,
            Product = db.Products.Find(product_id),
            ProductCount = 1,
            OrderID = OrderRef.Id
        };
        db.OrderItems.Add(item);
        db.SaveChanges();
    }

    public void OnSearch()
    {
        db.Products.ToList();
        var holder = db.Holders.FirstOrDefault(h => h.Id==Id);
        var fasade = new HolderProductsFasade(db, holder);
        var SearchedProducts = fasade.Search(SearchQuery);
        SearchOptions = fasade.GetOptions(SearchQuery).ToList();
        PagesCount = (SearchedProducts.Count() + SearchedProducts.Count() % 10) / 10;
        AvailableProducts = SearchedProducts.Skip((PageNumber - 1) * 10).Take(10).ToList();
        AvailableProducts.ForEach(product => product.ProductImages = db.ProductImages.Where(i => i.ProductID == product.Id).ToList());
    }
       
     

}
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-9ndCyUaIbzAi2FUVXJi0CjmCapSmO7SnpJef0486qhLnuZ2cdeRhO02iuK6FUUVM" crossorigin="anonymous">

<!doctype html>
<html lang="en">
<head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
    <title>Быстрый старт. Размещение интерактивной карты на странице</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <link rel="stylesheet" href="style.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" />
    
    
</head>
<body> 
     
    
    <div class="container">

        <div id="waitingView" hidden>waiting</div>
        <main id="mainView">

            <div class="card">
                <div class="card-header">
                    <h2>Подразделение @(holder is null? "": holder.HolderLocation)</h2>
                    <div>
                        <span class="btn btn-sm btn-secondary" @onclick='(evt => nav.NavigateTo($"/holder/stock/{Id}/products") )'>Просмотреть товары в наличии</span>
                    </div>
                    <form class="card p-2" style="width: 100%;" method="post" @onsubmit="(evt => { OnSearch(); StateHasChanged(); })" @onsubmit:preventDefault>
                        <div class="input-group">
                            <input list="options" class="form-control" placeholder="Поиск по каталогу" id="SearchQuery" name="SearchQuery" @oninput="(evt=>{ SearchQuery = evt.Value.ToString(); StateHasChanged(); })" value="@SearchQuery">

                            <button type="submit" class="btn btn-secondary" @onclick="(evt => { OnSearch(); StateHasChanged(); })">Поиск</button>
                        </div>
                        <datalist id="options">
                            @foreach (var option in SearchOptions)
                            {
                                <option>@option</option>
                            }
                        </datalist>
                    </form>
                </div>
                <div class="card-body">
                    <div class="container-fluid">
                        <div class="row">
                            <div class="col-8 d-flex flex-row flex-wrap" >

                                @foreach (Product product in AvailableProducts)
                                {
                                    <div class="card" style="width: 250px; height: 360px; margin: 10px;">
                                        <div class="card-header">
                                           
                                            <div style="height: 40px; width: 100%; font-size: 14px; text-align: center;">
                                                <b>@product.ProductName </b>                                               
                                            </div>
                                            <div style="height: 20px; width: 100%; font-size: 14px; text-align: center;">
                                                (осталось: <b>@db.ProductsInStock.First(instock => instock.ProductID == product.Id && instock.HolderID == Id).ProductCount</b> шт)
                                            </div>
                                        </div>

                                        <div class="card-body" @onclick="(evt => { product.IncImageIndex(); StateHasChanged(); })">
                                            <img src="/api/checkout/ProductImage?image_id=@(product.ProductImages.ToList()[product.ImageIndex].Id)" style="width: 200px; height: 200px;" />
                                            <div style="display: none;" id="ProductIndicatorsJson_@product.Id">@product.ProductIndicatorsJson</div>  
                                        </div>
                                        <div class="card-footer" style="background-color: lightgray;">
                                            <div><button style="width: 100%; align-self: flex-end; margin: auto;" @onclick="(evt =>{ Add(product.Id); StateHasChanged(); })" class="btn btn-primary btn-sm"> купить за @product.ProductCost $</button></div>
                                        </div>
                                    </div>

                                }
                            </div>
                            <div class="col-4">
                                <ul class="list-group mb-3">
                                    <div>
                                        @foreach (var item in OrderRef.OrderItems)
                                        {
                                            <li class="list-group-item d-flex justify-content-between lh-sm">
                                                <div>
                                                <h6 class="my-0"> @item.Product.ProductName </h6>
                                                <small class="text-muted"> @item.Product.ProductDesc </small>
                                                </div>
                                            <span class="text-muted">@item.Product.ProductCost</span>
                                            </li>
                                        }

                                        <li class="list-group-item d-flex justify-content-between">
                                            <span>Всего</span>
                                            <strong>@(SelectedProducts.Sum(p => p.ProductCost))</strong>
                                        </li>
                                        <button class="btn btn-sm btn-primary" style="width: 100%;" @onclick="(evt => { OnOrderCheckoutButtonClicked(); })"> офоромить заказ </button>
                                    </div>
                                </ul>
                            </div>
                        </div>
                    </div>

                </div>
            </div>

 
        </main>

        <footer class="my-5 pt-5 text-muted text-center text-small">
            <ul class="list-inline">
                <li class="list-inline-item"><a href="#"> Политика </a></li>
                <li class="list-inline-item"><a href="#"> Терминология </a></li>
                <li class="list-inline-item"><a href="#"> Поддержка </a></li>
            </ul>
        </footer>
    </div>
 
</body>
</html> 