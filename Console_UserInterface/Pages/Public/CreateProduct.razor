@page "/public/create-product"
@attribute [Authorize(Roles = "webuser")]
@using Console_BlazorApp.AppUnits.DeliveryModel;
@using System.Data.Common;
@using Console_UserInterface.AppUnits.DeliveryModel;
@inject DeliveryDbContext db
@code
{
    public async Task OnFileChanged(InputFileChangeEventArgs evt)
    {
        foreach (var file in evt.GetMultipleFiles(3))
        {
            try
            {
                using (var ms = new MemoryStream())
                {
                    using (var stream = file.OpenReadStream())
                    {
                        var data = new byte[stream.Length];
                        await stream.ReadAsync(data);
                        loadedDatas.Add(new ProductImage()
                        {
                            ContentType = file.ContentType,
                            ImageData = data
                        });                      
                    }

                }


                loadedFiles.Add(file);


            }
            catch (Exception ex)
            {
                Console.WriteLine($"File: {file.Name} \n Exception: {ex.Message} \n Stack: {ex.StackTrace}");
            }
        }

        isLoading = false;
    }

}
<h3>Создать описание товара</h3>
<div>
    <code class="text-danger">
        @foreach (var kv in validationMessages)
        {
            <b style="font-size: 16px;">@kv.Key</b>
            @foreach (var message in kv.Value)
            {
                <div style="margin-left: 10px;" class="text-danger">@message</div>
            }
        }
    </code>

    <form @onsubmit="OnFormSubmited" @onsubmit:preventDefault>
        <div class="form-group">
            <label for="exampleInputEmail1">Наименование</label>
            <input type="text" style="width: 100%;" class="form-control" value="@product.ProductName" placeholder="Наименование" @onchange="(evt => { product.ProductName = evt.Value.ToString(); validationMessages = product.Validate();  StateHasChanged(); })">
        </div>
        <div class="form-group">
            <label>Цена</label>
            <input type="number" style="width: 100%;" class="form-control" placeholder="Цена" value="@product.ProductCost" @onchange="(evt => { product.ProductCost = float.Parse(evt.Value.ToString());validationMessages = product.Validate();  StateHasChanged(); })">
        </div>
        <div class="form-group">
            <label>Описание</label>
            <textarea class="form-control" style="width: 100%;" placeholder="Описание" @onchange="(evt => { product.ProductDesc = evt.Value.ToString(); validationMessages = product.Validate(); StateHasChanged(); })">@product.ProductDesc</textarea>
        </div>
        <div class="form-group" style="margin:20px 0px 20px 0px;">

            <InputFile OnChange="@OnFileChanged" multiple style="width: 100%;" class="form-control"
                       oninput="for(let i=0; i<this.files.length; i++){
                while(document.getElementById('images').children.length>0)
                {
                    try{
                        document.getElementById('images').removeChild(document.getElementById('images').children[document.getElementById('images').children.length-1]);
                    }catch(err){
                        alert(err);
                    }
                }
                let reader = new FileReader();
                reader.readAsDataURL(this.files[i]);
                reader.onload=function(){
                    let img = document.createElement('img');
                    img.src = reader.result;
                    img.style = 'width: 360px; height: 360px; border: 1px solid var(--bs-primary)';
                    document.getElementById('images').appendChild(img);
                    console.info(reader.result);
                }}"></InputFile>

        </div>
        <div class="form-group" style="margin:20px 0px 20px 0px;">

            <InputFile OnChange="@OnVideoFilesChanged" multiple style="width: 100%;" class="form-control" ></InputFile>

        </div>
        <div class="card" style="margin: 20px 0px 20px 0px; padding: 20px;">
            <div><b style="font-size: 16px;">Характеристики</b></div><hr style="margin: 0px; padding: 0px;"/>
            <div style="margin-bottom: 20px"><span class="btn btn-sm btn-info" @onclick="(evt => { options.Add(new()); StateHasChanged(); })">добавить</span></div>
            <table class="table table-bordered table-hover">
                <tr>
                    <td>#</td>
                    <td>Опция</td>
                    <td>Значение</td>
                    <td></td>
                </tr>
                @foreach (var tuple in options.ToList())
                {
                    <tr style="height: 20px;">
                        <td>@(options.IndexOf(tuple) + 1)</td>
                        <td><input type="text" style="height: 20px;" value="@tuple.Item1" @onchange="(evt => { tuple.Item1 = evt.Value.ToString(); StateHasChanged(); })" /></td>
                        <td><input type="text" style="height: 20px;" value="@tuple.Item2" @onchange="(evt => { tuple.Item2 = evt.Value.ToString(); StateHasChanged(); })" /></td>
                        <td><span @onclick="(evt => { options.Remove(tuple); StateHasChanged(); })">удалить</span></td>
                    </tr>
                }
            </table>
        </div>
        <div id="images">
        </div>        
        
        <button type="submit" class="btn btn-primary">Зарегистрировать</button>
    </form>


</div>

@inject NavigationManager nav
@inject SigninUser signin
@code
{
    public class MyTuple
    {
        public string Item1 { get; set; }
        public object? Item2 { get; set; }
    }
    Dictionary<string, List<string>> validationMessages = new();
    Product product = new()
    {
        ProductImages = new()
    };

    List<MyTuple> options { get; set; } = new();

    string Message = null;
    private List<ProductVideo> loadedVideos = new();
    private List<ProductImage> loadedDatas = new();
    private List<IBrowserFile> loadedFiles = new();
    
    private int maxAllowedFiles = 3;
    private bool isLoading;

    public async Task OnFormSubmited()
    {
        try
        {
            var list = options.Select(option => new KeyValuePair<string, string>(option.Item1, option.Item2.ToString())).ToList();
            var p = product;
            product = new();
            product.ProductName = p.ProductName;
            product.ProductDesc = p.ProductDesc;
            product.ProductCost = p.ProductCost;            
            product.ProductIndicatorsJson = Newtonsoft.Json.JsonConvert.SerializeObject(new Dictionary<string, string>(list));


            Dictionary<string, List<string>> validation = product.Validate();
            if (validation.Count() > 0)
            {
                this.validationMessages = validation;
                StateHasChanged();
                return;
            }

            db.Products.Add(product);
            db.SaveChanges();
            foreach (var data in loadedDatas)
            {
                data.ProductID = product.Id;
                db.ProductImages.Add(data);
                db.SaveChanges();
            }
            nav.NavigateTo("/public/search-products");
        }
        catch(Microsoft.EntityFrameworkCore.DbUpdateException ex)
        {
            Message = ex.Message;
        }
        catch (Exception ex)
        {
            Message = ex.Message;
        }
        await Task.CompletedTask;
    }

    private async Task OnVideoFilesChanged(InputFileChangeEventArgs e)
    {
        isLoading = true;
        loadedVideos.Clear();
        
        foreach (var file in e.GetMultipleFiles(3))
        {
            try
            {
                using (var ms = new MemoryStream())
                {
                    using (var stream = file.OpenReadStream())
                    {
                        var data = new byte[stream.Length];
                        await stream.ReadAsync(data);
                        loadedVideos.Add(new ProductVideo()
                            {
                                VideoData = data,
                                ContentType = file.ContentType,
                                VideoName = "test"
                            });
                        //product.ProductImages = db.ProductImages.Where(image => image.ProductID == product.Id).ToList();
                    }
                }
                loadedFiles.Add(file);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"File: {file.Name} \n Exception: {ex.Message} \n Stack: {ex.StackTrace}");
            }
        }

        isLoading = false;
    }
    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;
        loadedDatas.Clear();
        loadedFiles.Clear();
        //"CreateProduct"
        var datas = signin.GetFromSession<List<byte[]>>(this.GetType().Name);
        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                using (var ms = new MemoryStream())
                {
                    using (var stream = file.OpenReadStream())
                    {
                        var data = new byte[stream.Length];
                        await stream.ReadAsync(data);                        
                        loadedDatas.Add(new ProductImage()
                        {
                            ImageData = data,
                            ContentType = file.ContentType,
                        });                                                                         
                        //product.ProductImages = db.ProductImages.Where(image => image.ProductID == product.Id).ToList();
                    }
                }
                loadedFiles.Add(file);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"File: {file.Name} \n Exception: {ex.Message} \n Stack: {ex.StackTrace}");
            }
        }

        isLoading = false;
    }
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        this.product = signin.GetFromSession<Product>(nav.Uri);
        options.Add(new MyTuple()
        {
            Item1 = "Вес",
            Item2 = "1"
        });
        product.ProductName = "Новый товар";
        product.ProductDesc = "Очень хороший товар";
        product.ProductCost = 1000;        
        product.ProductComments = new();
        product.ProductImages = new();
    }
} 