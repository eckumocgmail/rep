@page "/public/product-info/{Id:int}"
<PageTitle>Сведения о товаре</PageTitle>
@attribute [Authorize(Roles = "webuser")]
@using Console_BlazorApp.AppUnits.DeliveryModel;
@using Console_UserInterface.Shared.Deps;
@using Microsoft.EntityFrameworkCore;
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;
@using pickpoint_delivery_service;
@inject DbContextUser usersDb
@inject DeliveryDbContext db
@code 
{
    [Parameter]
    public int Id { get; set; }
    public Product product { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        this.product = db.Products.Include(p => p.ProductImages).First(p => p.Id == Id);
        product.ProductComments = db.ProductComments.Where(pc => pc.ProductId == product.Id).OrderByDescending(pc => pc.CreatedTime).ToList();
    }
}
<div class="card" style="width: 100%; height: 100%; margin: 10px;">
    <div class="card-header">

        <div style="height: 20px; width: 100%; font-size: 14px; text-align: center;">
            <b>@product.ProductName </b>
        </div>
        <div style="height: 20px; width: 100%; font-size: 14px; text-align: center;">
            (осталось: <b>@db.ProductsInStock.Where(instock => instock.ProductId == product.Id).Sum(p => p.ProductCount)</b> шт)
        </div>
    </div>
    
    <div class="card-body d-flex flex-column" style="overflow-y: auto; " @onclick="(evt => { product.IncImageIndex(); StateHasChanged(); })">
        <div class="d-flex flex-row flex-wrap">
            <img class="card" style="margin: 20px; height: 480px; width: 480px;" src="/api/checkout/ProductImage?image_id=@(product.ProductImages.ToList()[product.ImageIndex].Id)" />
            <div class="card" style="margin: 20px; padding: 20px; height: 480px; width: 480px; overflow-y: auto;" id="ProductIndicatorsJson_@product.Id">
                <table style="width: 100%;">
                    @foreach (var kv in (JsonConvert.DeserializeObject<Dictionary<string, object>>(product.ProductIndicatorsJson)))
                    {
                        @if (kv.Value is JObject == true)
                        {
                            <tr>
                                <td colspan="2" align="left">
                                    <b style="font-size: 18px;">@kv.Key</b>
                                </td>

                            </tr>
                            try
                            {
                                @foreach (var kvv in JsonConvert.DeserializeObject<Dictionary<string, object>>(JsonConvert.SerializeObject(kv.Value)))
                                {
                                    <tr>
                                        <td>@kvv.Key</td>
                                        <td>@(kvv.Value)</td>
                                    </tr>
                                }
                            }
                            catch (Exception)
                            {


                            }
                        }
                        else if (String.IsNullOrWhiteSpace(kv.Value.ToString()) == false)
                        {
                            <tr>
                                <td>@kv.Key</td>
                                <td>@(kv.Value)</td>
                            </tr>
                        }
                    }
                </table>
            </div>
            <div style="width: 600px; overflow-y: auto; height: 480px;">
                <h3>В наличии</h3>
                <ul class="list-group" style="font-size: 14px;">
                    @foreach (var instock in db.ProductsInStock.Where(ins => ins.ProductId == product.Id).ToList())
                    {
                        <li class="list-group-item" style="padding: 5px; margin: 5px;">@instock.ProductCount шт. @(db.Holders.First(h => h.Id == instock.HolderId).HolderLocation)</li>
                    }                  
                </ul>
            </div>
        </div>
    </div>
    <div class="card-footer" style="background-color: lightgray;">
        
    </div>
    <div >
        <b class="text-center" style="font-size: 18px; width: 100%;">Комментарии</b>

        <div class="d-flex flex-column flex-nowrap card">
            <b>Оставить комментарий</b>
            <div class="d-flex flex-row flex-nowrap" style="width: 100%;">
                <div style="width: 400px;">
                    <StarsView Editable="true" @ref="StarRef"></StarsView>
                </div>
                <div class="input-group">
                   
                    <textarea class="form-control" style="height: 70px;" @onchange="( evt => { CommentText = evt.Value.ToString(); })">@CommentText</textarea>
                </div>
            </div>
            <button class="btn btn-sm btn-primary w-100" @onclick="(evt => { OnSaveCommentButtonClicked(product); StateHasChanged(); })">сохранить</button>
        </div>
    </div>
    @if (product.ProductComments is not null)
    {
        <ul class="list-group mb-3">
            @foreach (var comment in product.ProductComments)
            {
                <li class="list-group-item d-flex flex-row flex-nowrap lh-sm">
                    <small class="text-muted" style="width: 280px;">
                        @comment.CreatedTime                        
                    </small>
                    <small class="text-muted" style="width: 400px;">
                        <StarsView Value="@(comment.CommentMark)" Editable="false"></StarsView>
                    </small>
                    <small class="text-muted" style="width: 400px;">
                        @(usersDb.UserContexts_.Include(u => u.Person).First(u => u.Id == comment.UserId).Person.GetFullName())
                    </small>
                    <small class="text-muted" style="width: 100%;" align="left"> @comment.CommentText  </small>
                </li>
            }
        </ul>
    }
</div>
@inject SigninUser signin
@code
{
    public string CommentText = "";
    public StarsView StarRef { get; set; }
    public void OnSaveCommentButtonClicked(Product product)
    {
        var user = signin.Verify();
        var item = new ProductComment() {
            ProductId = product.Id, 
            UserId = user.Id,
            CommentText = CommentText, 
            CreatedTime = DateTime.Now,
            CommentMark = StarRef.Value
        };
        db.Add(item);
        db.SaveChanges(); 
        product.ProductComments = db.ProductComments.Where(pc => pc.ProductId == product.Id).OrderByDescending(pc => pc.CreatedTime).ToList();
        StateHasChanged();
    }
}