@page "/user/messages"
@attribute [Authorize(Roles = "webuser")]
@inject DbContextUser usersDb
@inject IUserMessagesService userMessages
@inject SigninUser signin
@inject IHttpContextAccessor http
@code
{
    public int inboxNotReaded { get; set; }
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        try
        {
            toUserId = userMessages.GetUsers().First().Value;
            this.inbox = userMessages.GetInbox();
            this.inboxNotReaded = userMessages.GetInboxNotReaded();
            this.outbox = userMessages.GetOutbox();
            OnInboxButtonClicked();
        }
        catch(Exception ex)
        {
            message = ex.Message;
        }

    }
}
@code
{
    private List<UserMessageFile> files { get; set; } = new();
    private bool isLoading = false;

    public async Task OnFileChanged(InputFileChangeEventArgs evt)
    {
        isLoading = true;
        files.Clear();
        foreach (var file in evt.GetMultipleFiles(3))
        {
            try
            {
                using (var ms = new MemoryStream())
                {
                    using (var stream = file.OpenReadStream())
                    {
                        var data = new byte[stream.Length];
                        await stream.ReadAsync(data);
                        files.Add(new UserMessageFile()
                        {
                            ContentType = file.ContentType,
                            FileData = data,
                            FileName  = file.Name                            
                        });
                    }

                }                 
            }
            catch (Exception ex)
            {
                Console.WriteLine($"File: {file.Name} \n Exception: {ex.Message} \n Stack: {ex.StackTrace}");
            }
        }

        isLoading = false;
    }
}
<div class="card" style="width: 100%; height: 1024px;">
    <div class="card-header">
        <h2>Сообщения пользователя</h2>
        <nav class="navbar navbar-light" style="background-color: #e3f2fd;">
            <ul class="list-group d-flex flex-row">

                <li class="list-group-item @(view == "new_message"? "active": "")" @onclick="OnCreateMessageButtonClicked">Новое сообщение</li>
                <li class="list-group-item @(view == "inbox"? "active": "")" @onclick="OnInboxButtonClicked">Входящие (@inbox.Count())</li>
                <li class="list-group-item @(view == "outbox"? "active": "")" @onclick="OnOutboxButtonClicked">Исходящие (@outbox.Count())</li>
            </ul>
        </nav>
    </div>
    <div class="card-body">
        <div class="container-fluid">
            <div class="row">
               
                <div class="col-12">
                    @switch (view)
                    {
                        case "message":
                            <MessageCard></MessageCard>
                            break;
                        case "outbox":
                            <MessagesList Messages="@outbox"></MessagesList>
                            break;
                        case "inbox":
                            <MessagesList Messages="@inbox"></MessagesList>                      
                            break;
                        case "new_message":
                            <CreateMessage></CreateMessage>
                            break;
                    }
                </div>
            </div>
        </div>
    </div>
    <div class="card-footer"></div>
</div>
@inject SigninUser signin
@code 
{

    List<UserMessage> inbox;
    List<UserMessage> outbox;

    string view;
    string subject;
    string message;

    int fromUserId;
    int toUserId;

    

    public void OnResendMessageButtonClicked()
    {      
        toUserId = fromUserId;
        fromUserId = signin.Verify().Id;
        view = "new_message";
        message = "";
        StateHasChanged();
    }

    public void OnSendMessageButtonClicked()
    {
        var from = signin.Verify().Id;
        userMessages.Send("Тест", message, from, toUserId, null);

        this.inbox = userMessages.GetInbox();
        this.outbox = userMessages.GetOutbox();
        view = "inbox";
        StateHasChanged();
    }
    public void OnCreateMessageButtonClicked()
    {
        this.view = "new_message";
        StateHasChanged();
    }
    public void OnInboxButtonClicked()
    {
        this.view = "inbox";
        StateHasChanged();
    }
    public void OnOutboxButtonClicked()
    {
        this.view = "outbox";
        StateHasChanged();
    } 
    public void OnMessageClicked(UserMessage message)
    {
        //this.message = message;
        this.view = "message";
        this.message = message.Text;
        this.subject = message.Subject;
        this.fromUserId = (int)message.FromUserID;
        this.toUserId = (int)message.ToUserID;
        
        StateHasChanged();
    }
}
