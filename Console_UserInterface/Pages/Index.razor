@page "/"
@inject IServiceProvider provider
@code
{
    public List<string> InputTypes { get; set; } = new();
    public List<string> DbContextTypes { get; set; } = new();
    public Dictionary<string, object> TargetObjects = new();
}
<PageTitle>Главная страница</PageTitle>
<CardContainer>
    <CardHeader>Выберите контекст данных</CardHeader>
    <CardBody>
        <CheckList ListItems="@(GetType().Assembly.GetTypes<DbContext>().Select(t => t.GetTypeName()).ToList())" OnChanged="(evt => { DbContextTypes=evt; StateHasChanged(); })"></CheckList>               
    </CardBody>
</CardContainer>

@foreach (var db in DbContextTypes.Select(type => type.New()))
{
    <CardContainer>
        <CardHeader>Контекст @db.GetTypeName()</CardHeader>
        <CardBody>
            <CheckList ListItems="@db.GetEntitiesTypes().Select(p => p.GetTypeName().Replace("DbSet<","").Replace(">","")).Select(p => p.LastIndexOf(".")!=-1? p.Substring(p.LastIndexOf(".")+1): p).ToList()" OnChanged="(evt => InputTypes = evt)"></CheckList>
        </CardBody>
    </CardContainer>    
}

@foreach (var type in InputTypes)
{
    <CardContainer>
        <CardHeader>Сущность @type</CardHeader>
        <CardBody>
            @*<InputForm TypeName="@type"></InputForm>*@
            
            <FormEditor Model="@(TargetObjects.ContainsKey(type)? TargetObjects[type]: (TargetObjects[type]=type.New()))">
                <button class="btn btn-sm btn-primary" @onclick="(evt => { Console.WriteLine(TargetObjects[type].ToJsonOnScreen()); StateHasChanged(); } )">сохранить</button>
                <p>@(TargetObjects.ContainsKey(type) == false ? "" : TargetObjects[type].ToJsonOnScreen())</p>
            </FormEditor>
        </CardBody>
    </CardContainer>

}
