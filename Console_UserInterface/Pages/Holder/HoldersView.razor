@using pickpoint_delivery_service;
@using Console_BlazorApp.AppUnits.DeliveryModel;
@page "/holder/holders"
<PageTitle>Склады для хранения</PageTitle>

@attribute [Label("Точка выдачи. Поиск товаров.")]
@attribute [Authorize(Roles = "webuser")]
@inject pickpoint_delivery_service.DeliveryDbContext db
<PageTitle>Точка выдчи. Карточка ПВЗ</PageTitle>
<h3>Точки выдачи</h3>
@code
{
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        OnSearch();
    }

    EfEntityFasade<Holder> fasade = null;

    public int PageNumber { get; set; } = 1;
    public string SearchQuery { get; set; } = "";
    public int PagesCount { get; set; } = 1;
    List<string> SearchOptions = new();
    List<Holder> Available = new();
    string UserMessage = "";
    public void OnSearch()
    {
        try
        {
            db.Products.ToList();
            fasade = new EfEntityFasade<Holder>(db);
            var SearchedProducts = fasade.Search(SearchQuery);
            SearchOptions = fasade.GetOptions(SearchQuery).ToList();
            PagesCount = (SearchedProducts.Count() + SearchedProducts.Count() % 10) / 10;
            Available = SearchedProducts.Skip((PageNumber - 1) * 10).Take(10).ToList();
        }
        catch (Exception ex)
        {
            UserMessage = ex.Message;
        }
    }
}
@if (String.IsNullOrWhiteSpace(UserMessage) == false)
{
    <div class="alert alert-info">
        @UserMessage
    </div>
}
<div class="card">
    <div class="card-header">
        <form class="card p-2" style="width: 100%;" method="post" @onsubmit="(evt => { OnSearch(); StateHasChanged(); })" @onsubmit:preventDefault>
            <div class="input-group">
                <input list="options" class="form-control" placeholder="Поиск" id="SearchQuery" name="SearchQuery" @oninput="(evt=>{ SearchQuery = evt.Value.ToString(); SearchOptions = fasade.GetOptions(SearchQuery).ToList(); StateHasChanged(); })" value="@SearchQuery">

                <button type="submit" class="btn btn-secondary" @onclick="(evt => { OnSearch(); StateHasChanged(); })">Поиск</button>
            </div>
            <datalist id="options">
                @foreach (var option in SearchOptions)
                {
                    <option>@option</option>
                }
            </datalist>
        </form>
    </div>
    <div class="card-body">
        <ul class="list-group" style="overflow-y: auto;">
            @foreach (var holder in Available)
            {
                <li @onclick="(evt => OnHolderClicked(holder) )" onmouseleave="this.classList.remove('active')" onmouseover="this.classList.add('active')" class="list-group-item">@holder.HolderLocation</li>
            }
        </ul>
    </div>
    <div class="card-footer">
        @for (int i = 1; i < PagesCount; i++)
        {
            <span class="btn @((i==PageNumber)? "btn-primary": "bg-white")" style="width: 80; height: 80; border: 1px; margin: 2px;" @onclick="(GetCallback(i))">@i</span>
        }
    </div>
</div>
@inject NavigationManager nav
@code {

    public void OnHolderClicked(Holder holder)
    {
        nav.NavigateTo($"/holder/{holder.Id}/info");        
    }

    public Action<EventArgs> GetCallback(int i)
    {
        int p = i;
        return evt =>
        {
            PageNumber = p; OnSearch(); StateHasChanged();
        };
    }
}
