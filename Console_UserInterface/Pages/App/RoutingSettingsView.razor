@page "/app/routing"
@using Console_UserInterface.AppUnits.InterfaceModule.InterfaceServices.InputModal;
@inject AppRouterMiddleware router
@inject IModalService modal
@inject IInputModalService input
@inject IBootstrapModalService bmodal
@code
{
    public List<string> Checked { get; set; } = new();
}
@code
{

    public async Task OnAddRouteButtonClicked()
    {
        var modalRef = modal.Show<CreateRouteView>("Создание маршрута");
        await Task.CompletedTask;

        //CreateRoute created = await input.Create<CreateRoute>();
        //router.AddControllerAction(created.ControllerType, created.ControllerAction);
    }
}
<CardContainer>
    <CardHeader>
        <h3>Зарегистрированные операции</h3>
        <div class="card d-flex flex-row flex-nowrap">
             
            <span class="btn btn-sm" style="margin: 10px; min-width: 100px;" @onclick="OnAddRouteButtonClicked"> добавить </span>
            <span class="btn btn-sm @(Checked.Count()==0 ? "disabled": "")" style="margin: 10px; min-width: 100px;"> удалить </span>
        </div>
    </CardHeader>
    <CardBody>
        <ul class="list-group">
            @foreach (var kv in router.routing)
            {
                <li class="list-group-item" style="padding: 0px; margin: 0px;">
                    <div class="nav-item px-3">
                        <NavLink class="nav-link d-flex flex-row flex-nowrap" href="@kv.Key">
                            <CheckBox Checked="@Checked.Contains(kv.Key)" OnChange="(evt => { if(Checked.Contains(kv.Key))Checked.Remove(kv.Key); else Checked.Add(kv.Key); StateHasChanged();})"></CheckBox>
                            <span class="oi oi-account-login" aria-hidden="true"></span> @kv.Value
                        </NavLink>
                    </div>
                </li>
            }
        </ul>
    </CardBody>
    <CardFooter></CardFooter>
</CardContainer>
