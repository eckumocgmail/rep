@inject AppRouterMiddleware router
@inject IServiceProvider provider
@code
{
    public string AuthorizationPolicy { get; set; }
    public string ControllerType { get; set; }
    public string ControllerAction { get; set; }
    public List<string> AvailableTypes { get; set; } = new();
    public List<string> AvailableActions { get; set; } = new();

    public InputFormModel InputForm { get; set; }    
}
@code
{

    public void OnSaveClicked()
    {
        router.AddControllerAction(ControllerType, ControllerAction);
        StateHasChanged();
    }
    public void OnExecuteClicked()
    {
        var arguments = (Dictionary<string, object>)InputForm.Item;
        try
        {
            var service = provider.GetService(ControllerType.ToType());
            var result = service.Call(ControllerAction, arguments);    
        } 
        catch(Exception ex)
        {
            this.Error($"Ошибка при выполнении вызова {ControllerType}.{ControllerAction} с аргументами {arguments.ToJson()}");
        }
    }
    public List<string> ParseGenericArguments(string typeName)
    {
        int i1 = typeName.IndexOf('<');
        int i2 = typeName.IndexOf('>');
        if(i1<i2)
        {
            return typeName.Substring(i1 + 1, i2 - i1 + 1).Split(",").ToList();
        }
        return new();
    }
}
<CardContainer>
    <CardHeader>Сборка</CardHeader>
    <CardBody>
        <div class="input-group">
            <label>Контроллер</label>
            <SelectBox Label="" Options="AvailableTypes" OnChange="OnControllerTypeChanged"></SelectBox>
        </div>
        @*if(ControllerType is not null && ParseGenericArguments(ControllerType).Count()>0)
        {
            
            @foreach(var genericArgument in ControllerType.ToType().GetGenericArguments())
            {
                <div class="input-group">
                    <label>@genericArgument.Name</label>
                    <SelectBox Label="" Options="@(GetType().Assembly.GetTypes().Where(t=>t.IsExtends(genericArgument.DeclaringType)).Select(t=>t.GetTypeName()).ToList())" OnChange="OnControllerTypeChanged"></SelectBox>
                </div>
            }
        }*@
        <div class="input-group">
            <label>Действие</label>
            <SelectBox Label="" Options="AvailableActions" OnChange="OnControllerActionChanged"></SelectBox>
        </div>
        
        <FormModel Form="InputForm">
            <button class="btn btn-sm btn-primary" @onclick="OnSaveClicked">Сохранить</button>
            <button class="btn btn-sm btn-primary" @onclick="OnExecuteClicked">Выполнить</button>
            <StatusBar></StatusBar>
        </FormModel>
    </CardBody>
    <CardFooter></CardFooter>
</CardContainer>
@code
{

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        AvailableTypes = GetType().Assembly.GetTypes().Where(t => t.IsPublic && t.IsExtends(typeof(BaseEntity)) == false && t.IsInterface == false && t.IsExtends(typeof(TestingElement)) == false && t.IsExtends(typeof(DbContext)) == false).Select(t => t.GetTypeName()).ToList();
    }
}
@code
{
    public void OnControllerTypeChanged(string evt)
    {
        this.ControllerType = evt;
        this.AvailableActions = this.ControllerType.ToType().GetOwnMethodNames();
        StateHasChanged();
    }
    public void OnControllerActionChanged(string evt)
    {
        this.InputForm = null;
        StateHasChanged();
        this.InputForm = this.ControllerType.ToType().GetInputForm(this.ControllerAction = evt);
        StateHasChanged();
    }
}